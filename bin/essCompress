#!/bin/bash

function abspath {
    if [[ -d "$1" ]]
    then
        pushd "$1" >/dev/null
        pwd
        popd >/dev/null
    elif [[ -e "$1" ]]
    then
        pushd "$(dirname "$1")" >/dev/null
        echo "$(pwd)/$(basename "$1")"
        popd >/dev/null
    else
        echo "$1" does not exist! >&2
        return 127
    fi
}

Help()
{
   # Display Help
   echo "Description of the script functions here."
   echo
   echo "Syntax: essCompress [options]"
   echo "mandatory arguments:"
   echo "-i [filepath]     Input file (include full path)"
   echo "-k [INT]          k-mer size"
   echo "optional arguments:"
   echo "-a [INT]          min-abundance (default 1)"
   echo "-f                fast compression mode"
   # echo "-m [0|1|2]        compression mode (default:0); 0=ess(high compression), 1=ess-tip(low memory compression), 2=no compression (plain spss)"
   #echo "-t [0|1]          Specify input type (default 1): 0=fasta/fastq file, 1=cdbG by bcalm"
   echo "-h                Print this Help."
   echo "-V                Print software version and exit."
   echo
   # echo "-g                Print the GPL license notification."
}
  

Version()
{
   echo "ESS-Compress v2.0"
}



################################################################################
# Function to validate that output represents the k-mers in the fasta file
################################################################################
validate(){
   K=$1
   UNITIG_FILE=$2
   DECOMPRESSED_FILE=$3
   echo "Validating decoded ESS...";
   dskESS -file $UNITIG_FILE -kmer-size $K -abundance-min 1  -verbose 0 -out unitigs.h5
   dskESS -file $DECOMPRESSED_FILE -kmer-size $K -abundance-min 1  -verbose 0 -out spss.h5
   dsk2asciiESS -file unitigs.h5 -out unitigs.txt  -verbose 0
   dsk2asciiESS -file spss.h5 -out spss.txt  -verbose 0
   #echo "doing highly  accurate validation................"
   echo "Sorting k-mers for validation................"
   #sort -k 1 -n unitigs.txt -o sorted_unitigs.txt; sort -k 1 -n spss.txt -o sorted_spss.txt
   sort unitigs.txt -o sorted_unitigs.txt; sort spss.txt -o sorted_spss.txt
   
   
   cmp sorted_unitigs.txt sorted_spss.txt && echo '### SUCCESS: Files Are Identical! ###' || echo '### WARNING: Files Are Different! ###'
   rm -rf sorted_spss.txt spss.txt unitigs.txt unitigs.h5 spss.h5
   rm -rf sorted_unitigs.txt
}

################################################################################
# Function to compute k-mers (DSK) and cdbg (bcalm2)
################################################################################
essCompress_prior(){
   L=$1
   K=$2
   A=$3
   TYPE=$4
   O=$5
   KMERS_FA=kmers.fa

   L=$(abspath $L)
   O=$(dirname $L) 
   
   cd $O
   mkdir -p tmp_ess
   cd tmp_ess

   ## get unitigs
   echo "Running BCALM2 to get compacted de Bruijn graph..."
   /usr/bin/time  -f "%M\t%e" --output-file=mem_bcalm bcalmESS -in $L -out kmers -kmer-size $K  -abundance-min $A -verbose 0
   failureMessage BCALM2
   rm -rf *.glue* *.h5 trashme*

   ## get one k-mer per line fasta file
   echo "Running DSK to get k-mers..."
   dskESS -file kmers.unitigs.fa -kmer-size $K -abundance-min 1 -verbose 0 -out kmers.h5
   failureMessage DSK

   dsk2asciiESS -fasta -file kmers.h5 -out $KMERS_FA -verbose 0
   failureMessage DSK2ASCII
   rm -rf kmers.h5
}

#step 1
essCompress_main(){
   L=$1
   K=$2
   A=$3
   TYPE=$4
   O=$5
   STREXT=".essc"
   STREXTD=".essd"

   L=$(abspath $L)
   O2=$(dirname $L)  
   FULLFINALMFC=$(echo $O$STREXT)
   FULLFINALMFCD=$(echo $O$STREXTD)
   #KMERS_FA=kmers.fa
   KMERS_FA=$L



   cd $O2
   #mkdir -p tmp_ess
   #cd tmp_ess

   #get ess compression
   #L=kmers.unitigs.fa
   /usr/bin/time  -f "%M\t%e" --output-file=mem_ess_$TYPE essC -i $L -k $K -t $TYPE
   failureMessage ESS

   if [[ "$TYPE" -eq "0" ]]; then
      cat kmers.ess | tr "[" "g" | tr "]" "t" | tr "+" "a" | tr "-" "c" | awk -F=' ' '{print ""$1}' > kmers_acgt.ess
      var=$(echo ">2.0\_$K\_0") ;  sed -i "1s/.*/$var/" kmers_acgt.ess
      /usr/bin/time  -f "%M\t%e" --output-file=mem_mfc_$TYPE mfcESS kmers_acgt.ess
      failureMessage MFC
      mv kmers_acgt.ess.mfc $FULLFINALMFC
      echo "Output is in '$FULLFINALMFC'".
   elif [[ "$TYPE" -eq  "1" ]]; then
      cat kmers.esstip | tr "{" "a" | tr "}" "c" | tr "(" "g" | tr ")" "t" | awk -F=' ' '{print ""$1}' > kmers_acgt.esstip
      var=$(echo ">2.0\_$K\_1") ;  sed -i "1s/.*/$var/" kmers_acgt.esstip
      /usr/bin/time  -f "%M\t%e" --output-file=mem_mfc_$TYPE mfcESS kmers_acgt.esstip
      failureMessage MFC
      mv kmers_acgt.esstip.mfc $FULLFINALMFC
      echo "Output is in '$FULLFINALMFC'".
   else
      #/usr/bin/time  -f "%M\t%e" --output-file=mem_mfc_$TYPE mfcESS kmers.ust.spss
      #failureMessage MFC
      mv kmers.ust.spss $FULLFINALMFCD
      echo "Output is in '$FULLFINALMFCD'".
   fi

   #validate
   if [[ $validateset -eq 1 ]]; then

      if [[ "$TYPE" -eq "0" ]]; then
         #cat kmers.ess | tr "[" "g" | tr "]" "t" | tr "+" "a" | tr "-" "c" | awk -F=' ' '{print ""$1}' > kmers2.ess
         #/usr/bin/time  -f "%M\t%e" --output-file=mem_mfc_$TYPE mfcESS kmers2.ess

         var=$(echo ">2.0\_$K\_0") ; sed -i "1s/.*/$var/" kmers.ess
         /usr/bin/time  -f "%M\t%e" --output-file=mem_dec_$TYPE essD kmers.ess

         validate $K $KMERS_FA kmers.ess.spss

      elif [[ "$TYPE" -eq  "1" ]]; then
         #cat kmers.esstip | tr "{" "a" | tr "}" "c" | tr "(" "g" | tr ")" "t" | awk -F=' ' '{print ""$1}' > kmers2.esstip
         #/usr/bin/time  -f "%M\t%e" --output-file=mem_mfc_$TYPE mfcESS kmers2.esstip

         var=$(echo ">2.0\_$K\_1") ;  sed -i "1s/.*/$var/" kmers.esstip
         /usr/bin/time  -f "%M\t%e" --output-file=mem_dec_$TYPE essD kmers.esstip

         validate $K $KMERS_FA kmers.esstip.spss
      else
         /usr/bin/time  -f "%M\t%e" --output-file=mem_mfc_$TYPE mfcESS kmers.ust.spss
         validate $K $KMERS_FA kmers.ust.spss
      fi

   fi
   #cd $O
   cd $O2
   cd ../
   rm -rf tmp_ess

}

countNonDNA(){
   cat $1 |  grep -v '>' | grep -o "[acgt]" | wc | awk '{print $3-$1}'
}

countDNA(){
   cat $1 |  grep -v '>' | grep -o "[ACGT]" | wc | awk '{print $3-$1}'
}

failureMessage(){
   if [ $? -eq 0 ]
   then
      echo "----------------------------"
      echo "$1 completed successfully."
      echo "----------------------------"
   else
      echo "----------------------------"
      echo "$1 FAILED." 
      echo "----------------------------"
      exit
   fi
}


################################################################################
################################################################################
# Main program                                                                 #
################################################################################
fastaORcdbgset=0
modeset=0
outdirset=0
inputset=0
validateset=0
fastmode=0
################################################################################
K=0
A=1
MODE=0
################################################################################
################################################################################
# Process the input options. Add options as needed.                            #
################################################################################
# Get the options
while getopts "vhfVk:i:a:" option; do
   case $option in
      h) # display Help
         Help
         exit;;
      V) # display version
         Version
         exit;;
      v) validateset=1
         ;;
      k) K=$OPTARG
         ;;
         #exit;;
      a) A=$OPTARG
         ;;
         #exit;;
      # m) MODE=$OPTARG
      #   [[ ! $MODE =~ 0|1|2 ]] && {
      #       echo "Incorrect options provided, use either 0 (ess), or 1 (ess-tip) or 2 (spss)"
      #       exit 1
      #   }
      #   modeset=1
      #   ;;

      f) #
        fastmode=1
        MODE=1
        ;;
      # s) #
      #   MODE=2
      #   ;;
      # t) fastaORcdbg=$OPTARG
      #   [[ ! $fastaORcdbg =~ 0|1 ]] && {
      #       echo "Incorrect options provided, use either 0 (fasta/q), or 1 (cdbg)"
      #       exit 1
      #   }
      #   fastaORcdbgset=1
      #   ;;
      i) INPUTFILE=${OPTARG}
         inputset=1
         if [ ! -f "$INPUTFILE" ]; then
            echo "'$INPUTFILE' is not a valid file."
            exit 2
         fi
         ;;
         #exit;;
      # o) OUTDIR=${OPTARG}
      #    outdirset=1
      #    ;;
      #    #exit;;
     \?) # incorrect option
         echo "Error: Invalid option,  Use -h for help."
         exit;;
   esac
done

if [[ K -eq 0 ]]; then
    echo "You must specify a valid value for k-mer size [-k]. Use -h for help."
    Help
    exit 2
fi

if [[ inputset -eq 0 ]]; then
    echo "You must specify a valid input file [-i]. Use -h for help."
    Help
    exit 2
fi

# if [[ outdirset -eq 0 ]]; then
#     echo "You must specify output directory. Use -h for help."
#     exit 2
# fi

# if [[ modeset -eq 0 ]]; then
#     echo "You must specify compression mode [-m]. Use -h for help."
#     exit 2
# fi

#export PATH="/home/aur1111/s/absorb/v2.0/bin:$PATH"; source ~/.bashrc
OUTDIR=""
fastaORcdbgset=0
if [[ fastaORcdbg -eq 0 ]]; then
    
    ABSPA=$(abspath $INPUTFILE)
    DIRR=$(dirname $ABSPA)
    OUTDIR=$(dirname $ABSPA)
    OUTDIR="$OUTDIR/$(basename "$ABSPA")"
    essCompress_prior $ABSPA $K $A $MODE $OUTDIR
    essCompress_main $DIRR/tmp_ess/kmers.unitigs.fa $K $A $MODE $OUTDIR
    
fi

if [[ fastaORcdbg -eq 1 ]]; then
   ABSPA=$(abspath $INPUTFILE)
   DIRR=$(dirname $ABSPA)
   essCompress_main $ABSPA $K $A $MODE $OUTDIR
   failureMessage ESS
fi
